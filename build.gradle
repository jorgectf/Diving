/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    //id 'org.graalvm.buildtools.native' version '0.9.11'
    id 'org.beryx.runtime' version '1.12.7'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.palantir.git-version' version '0.12.3'
    id 'jacoco'
    id 'maven-publish'
}


version gitVersion()

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

	// Use jfreechart for charting.
    implementation 'org.jfree:jfreechart:1.5.3'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

application {
    // Define the main class for the application.
    mainClass = 'slaclau.diving.decompression.DecompressionPlanner'
}

run {
	outputs.upToDateWhen { false }
}


test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}



jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
		html.required = true
    }
}



//graalvmNative {
	//binaries {
		//main {
			//buildArgs.add('--report-unsupported-elements-at-runtime')
			//buildArgs.add('-Djava.awt.headless=false')
			//buildArgs.add('-J-Xmx7G')
			//debug = true
			//verbose = true
			//fallback = false
			//configurationFileDirectories.from(file('src/config'))
		//}
	//}
//}

runtime {
	jpackage {
		def currentOs = org.gradle.internal.os.OperatingSystem.current()
		if(currentOs.windows) {
			installerType = 'msi'
			appVersion = '0'
			installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
		}
		if(currentOs.linux) {
			installerType = 'deb'
			installerOptions = ['--linux-shortcut']
		}
		installerName = 'decompression-planner'
	}
}

publishing {
	repositories {
    	maven {
      		name = "GitHubPackages"
      		url = "https://maven.pkg.github.com/slaclau/Diving"
      		credentials {
        		username = System.getenv("GITHUB_ACTOR")
        		password = System.getenv("GITHUB_TOKEN")
      		}
    	}
	}
  
  	publications {
  		jars(MavenPublication) {
  			groupId = 'slaclau.diving'
			artifactId = 'decompression-planner'
  		
  			from components.java
  		}
  	}
}

